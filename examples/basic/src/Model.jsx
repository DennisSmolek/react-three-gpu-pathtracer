/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useLayoutEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { MeshPhysicalMaterial } from 'three'
import { Center } from '@react-three/drei'

export default function Model(props) {
  const { scene } = useGLTF('/model.glb')

  useLayoutEffect(() => {
    convertOpacityToTransmission(scene)
  }, [])

  return <primitive {...props} object={scene} />
}

useGLTF.preload('/model.glb')

function convertOpacityToTransmission(model) {
  model.traverse((c) => {
    if (c.material) {
      const material = c.material
      if (material.opacity < 0.65 && material.opacity > 0.2) {
        const newMaterial = new MeshPhysicalMaterial()
        for (const key in material) {
          if (key in material) {
            if (material[key] === null) {
              continue
            }

            if (material[key].isTexture) {
              newMaterial[key] = material[key]
            } else if (material[key].copy && material[key].constructor === newMaterial[key].constructor) {
              newMaterial[key].copy(material[key])
            } else if (typeof material[key] === 'number') {
              newMaterial[key] = material[key]
            }
          }
        }

        newMaterial.opacity = 1.0
        newMaterial.transmission = 1.0
        c.material = newMaterial
      }
    }
  })
}
